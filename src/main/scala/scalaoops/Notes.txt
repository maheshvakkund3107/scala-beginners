--Map without the Single Abstract Method format.
  println(
    listOfIntegers
      .map(new MyTransformer[Int, Int] {
        override def transform(elem: Int): Int = elem * 2
      })
      .toString
  )

--Map with the Single Abstract Method format.
    println(
      listOfIntegers
        .map((elem: Int) => elem * 2)
        .toString
    )

--Flat Map without the Single Abstract Method format.
 println(
    listOfIntegers
      .flatMap(new MyTransformer[Int, MyList[Int]] {
        override def transform(elem: Int): MyList[Int] =
          new Cons[Int](elem, new Cons[Int](elem + 1, Empty))
      })
      .toString
  )

--Flat Map with the Single Abstract Method format.
  println(
    listOfIntegers
      .flatMap((elem: Int) =>
        new Cons[Int](elem, new Cons[Int](elem + 1, Empty))
      )
      .toString

 --Using Functions
  println(
    listOfIntegers
      .map(new Function1[Int, Int] {
        override def apply(elem: Int): Int = elem * 2
      })
      .toString
  )

 val adder: ((Int, Int) => Int) = new Function2[Int, Int, Int] {
     override def apply(a: Int, b: Int): Int = a + b

 val adder: (Int, Int) => Int = (a: Int, b: Int) => a + b